---
export const prerender = false;

import Layout from '@layouts/Layout.astro';
import PageHeader from '@components/blog/PageHeader.astro';
import AccommodationCard from '@components/accommodation/AccommodationCard.astro';
import AccommodationCategoriesWithCount from '@components/accommodation/AccommodationCategoriesWithCount.astro';
import { Card, CardContent, CardHeader, CardTitle } from '@components/starwind/card';
import { Badge } from '@components/starwind/badge';
import { Icon } from 'astro-icon/components';
import { loadPlacesForCategory } from '@utils/placeContent';

const lang: string = Astro.locals.lang ?? 'fr';
const params = Astro.params;
const pageContext = Astro.locals.pageContext;

if (!pageContext || pageContext.type !== 'hebergements') {
	throw new Error('Contexte hébergements absent ou incorrect');
}

const entityConfig = pageContext.entityConfig;
const categoryId = pageContext.categoryId;

if (!entityConfig || !categoryId) {
	throw new Error('Configuration entité ou catégorie manquante');
}

const hebergementsSlug = pageContext.slug ?? params.hebergements_slug ?? 'hebergements';
const categorySlug = params.category ?? pageContext.categorySlug ?? '';

const translations = {
	fr: {
		home: 'Accueil',
		hebergements: 'Hébergements',
		empty: "Aucun hébergement trouvé dans cette catégorie pour le moment.",
		categoryOverview: 'Présentation de la catégorie',
		popularTitle: 'Populaires dans cette catégorie',
		resultsTitle: 'Hébergements disponibles',
		categoryCount: (count: number) => `${count} hébergement${count > 1 ? 's' : ''}`,
	},
	en: {
		home: 'Home',
		hebergements: 'Accommodations',
		empty: 'No accommodations found in this category yet.',
		categoryOverview: 'Category overview',
		popularTitle: 'Popular in this category',
		resultsTitle: 'Available accommodations',
		categoryCount: (count: number) => `${count} accommodation${count === 1 ? '' : 's'}`,
	},
	es: {
		home: 'Inicio',
		hebergements: 'Alojamientos',
		empty: 'No se encontró alojamiento en esta categoría.',
		categoryOverview: 'Descripción de la categoría',
		popularTitle: 'Populares en esta categoría',
		resultsTitle: 'Alojamientos disponibles',
		categoryCount: (count: number) => `${count} alojamiento${count === 1 ? '' : 's'}`,
	},
} as const;

const t = translations[lang as keyof typeof translations] ?? translations.fr;

const { currentCategory, places, popular, rootCategory, childCategories } = await loadPlacesForCategory(
	entityConfig,
	categoryId,
	lang,
);

const categoryName = currentCategory?.name ?? pageContext.category?.data?.name ?? categorySlug;
const categoryDescription = currentCategory?.description ?? (pageContext.category?.data as any)?.description ?? '';
const categoryIcon = currentCategory?.iconName ?? rootCategory?.iconName ?? 'openmoji:bed';
const totalCount = places.length;

const breadcrumbs = [
	{ label: t.home, url: `/${lang}/`, icon: 'openmoji:house' },
	{ label: rootCategory?.name ?? t.hebergements, url: `/${lang}/${hebergementsSlug}`, icon: rootCategory?.iconName ?? 'openmoji:bed' },
	{ label: categoryName, icon: categoryIcon, isCurrent: true },
];

const popularToRender = popular.slice(0, 4);

const renderablePlaces = places.map((item) => item.accommodation);
const siblingCategories = childCategories.filter((category) => category.id !== categoryId);
---

<Layout title={categoryName} lang={lang}>
	<PageHeader
		title={categoryName}
		description={categoryDescription || t.categoryCount(totalCount)}
		lang={lang}
		magazineSlug={hebergementsSlug}
		breadcrumbItems={breadcrumbs}
		icon={categoryIcon}
	/>

	<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
		<div class="grid grid-cols-1 lg:grid-cols-[minmax(0,2fr)_minmax(0,1fr)] lg:gap-12">
			<div class="space-y-10">
				<Card>
					<CardHeader>
						<CardTitle class="flex items-center gap-3 text-lg">
							<Icon name={categoryIcon} class="h-6 w-6 text-blue-600" />
							<span>{t.categoryOverview}</span>
							<Badge variant="secondary">{t.categoryCount(totalCount)}</Badge>
						</CardTitle>
					</CardHeader>
					<CardContent class="text-gray-600 leading-relaxed">
						{categoryDescription ? (
							<p>{categoryDescription}</p>
						) : (
							<p>{t.categoryCount(totalCount)}</p>
						)}
					</CardContent>
				</Card>

				<section class="space-y-6">
					<header class="flex items-center justify-between">
						<h2 class="text-2xl font-semibold text-gray-900">{t.resultsTitle}</h2>
						{totalCount > 0 && (
							<span class="text-sm text-gray-500">{t.categoryCount(totalCount)}</span>
						)}
					</header>
					{renderablePlaces.length > 0 ? (
						<div class="space-y-6">
							{renderablePlaces.map((accommodation) => (
								<AccommodationCard
									accommodation={accommodation}
									lang={lang}
									hebergementsSlug={hebergementsSlug}
									variantData="recent"
									variantStyle="horizontal"
								/>
							))}
						</div>
					) : (
						<Card>
							<CardContent class="py-12 text-center text-gray-500">
								<p>{t.empty}</p>
							</CardContent>
						</Card>
					)}
				</section>
			</div>

			<aside class="space-y-10 mt-12 lg:mt-0">
				<AccommodationCategoriesWithCount parentId={pageContext.entityId} hebergementsSlug={hebergementsSlug} />

				{siblingCategories.length > 0 && (
					<Card>
						<CardHeader>
							<CardTitle class="flex items-center gap-2 text-base">
								<Icon name="openmoji:round-pushpin" class="h-5 w-5 text-rose-500" />
								<span>Explorer</span>
							</CardTitle>
						</CardHeader>
						<CardContent>
							<ul class="space-y-3">
								{siblingCategories.map((category) => (
									<li>
										<a
											href={`/${lang}/${hebergementsSlug}/${category.slug}`}
											class="flex items-center justify-between text-sm font-medium text-gray-600 hover:text-blue-600 transition-colors"
										>
											<span class="flex items-center gap-2">
												{category.iconName && <Icon name={category.iconName} class="h-4 w-4" />}
												<span>{category.name}</span>
											</span>
											{category.slug !== categorySlug && <Icon name="openmoji:right-arrow" class="h-4 w-4" />}
										</a>
									</li>
								))}
							</ul>
						</CardContent>
					</Card>
				)}

				{popularToRender.length > 0 && (
					<section class="space-y-4">
						<header class="flex items-center gap-2">
							<Icon name="openmoji:glowing-star" class="h-5 w-5 text-amber-500" />
							<h2 class="text-lg font-semibold text-gray-900">{t.popularTitle}</h2>
						</header>
						<div class="space-y-4">
							{popularToRender.map((item) => (
								<AccommodationCard
									accommodation={item.accommodation}
									lang={lang}
									hebergementsSlug={hebergementsSlug}
									variantData="popular"
									variantStyle="simple"
								/>
							))}
						</div>
					</section>
				)}
			</aside>
		</div>
	</main>
</Layout>