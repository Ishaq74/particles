---
export const prerender = false; // Set to false to render dynamically on each request

import Layout from '@layouts/Layout.astro';
import { Card, CardHeader, CardContent, CardTitle } from '@components/starwind/card';
import { Icon } from 'astro-icon/components';
import PageHeader from '@components/blog/PageHeader.astro';
import ArticleCard from '@components/blog/ArticleCard.astro';
import NewsletterCard from '@components/blog/NewsletterCard.astro';
import ContributeCard from '@components/blog/ContributeCard.astro';
import CategoriesWithCount from '@components/blog/CategoriesWithCount.astro';
import { loadArticleCollections } from '@utils/articleContent';

let featuredArticles = [];
let recentArticles = [];
let sidebarPopularArticles = [];

export async function getStaticPaths() {
  // Routes magazine explicites, pas de scaling
  const langs = ['fr', 'en', 'es'];
  return langs.map(lang => ({ params: { lang, magazine_slug: 'magazine' } }));
}

const { lang, magazine_slug } = Astro.params;
const pageContext = Astro.locals.pageContext;
if (!pageContext || pageContext.type !== 'magazine') {
  throw new Error('Contexte magazine absent ou incorrect');
}
const magazineCategoryId = pageContext.entityId;
const rootCategoryEntry = (pageContext as any).entity ?? null;
const entityConfig = pageContext.entityConfig;

let pageTitle = 'Magazine';
let magazineCategoryIcon: string | null = null;
let magazineCategoryDescription: string | null = null;
let magazineSlug: string = typeof pageContext.slug === 'string' && pageContext.slug
  ? pageContext.slug
  : (magazine_slug || 'magazine');

const { rootCategory, featured, recent, popular } = await loadArticleCollections(entityConfig, lang);

const rootCategoryData = rootCategoryEntry ?? rootCategory?.entry ?? null;

if (rootCategory) {
  pageTitle = rootCategory.name;
  magazineCategoryDescription = rootCategory.description;
  magazineSlug = pageContext.slug ?? rootCategory.slug ?? magazineSlug;
  magazineCategoryIcon = rootCategory.entry.data.iconName ?? null;
}

if (rootCategoryData && !magazineCategoryDescription) {
  const fallbackTranslation = (rootCategoryData.data as any).translations?.[0];
  if (fallbackTranslation) {
    magazineCategoryDescription = fallbackTranslation.description ?? null;
  }
  magazineCategoryIcon = magazineCategoryIcon ?? (rootCategoryData.data as any).iconName ?? null;
}

featuredArticles = featured;
recentArticles = recent;
sidebarPopularArticles = popular;
---

<Layout title={pageTitle} lang={lang}>
  <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <PageHeader
      title={pageTitle}
      description={magazineCategoryDescription || "Découvrez les dernières actualités, bons plans et histoires qui font la richesse d'Annecy et de sa région."}
      lang={lang}
      magazineSlug={magazineSlug}
      breadcrumbItems={[
        { label: lang === 'fr' ? 'Accueil' : lang === 'en' ? 'Home' : 'Inicio', url: `/${lang}/`, icon: 'openmoji:house' },
        { label: pageTitle, icon: 'openmoji:newspaper', isCurrent: true },
      ]}
      icon={magazineCategoryIcon || 'openmoji:books'}
    />

    <div class="grid grid-cols-1 lg:grid-cols-3 lg:gap-12">
      <div class="lg:col-span-2">
        {/* Featured Articles Section */}
        <section class="mb-12">
          <h2 class="text-3xl font-bold text-gray-800 mb-6">À la une</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
            {featuredArticles.length > 0 ? featuredArticles.map((articleData) => (
              <ArticleCard
                {...articleData}
                lang={lang}
                magazineSlug={magazineSlug}
                variantData="full"
                variantStyle="featured"
              />
            )) : <p class="text-gray-500 col-span-2">Aucun article "À la une" pour le moment.</p>}
          </div>
        </section>

        {/* Recent Articles Section */}
        <section>
          <h2 class="text-3xl font-bold text-gray-800 mb-6">Articles récents</h2>
          <div class="space-y-6">
            {recentArticles.length > 0 ? recentArticles.map((articleData) => (
              <ArticleCard
                {...articleData}
                lang={lang}
                magazineSlug={magazineSlug}
                variantData="recent"
                variantStyle="horizontal"
              />
            )) : <p class="text-gray-500">Aucun article récent pour le moment.</p>}
            {/* Placeholder for "Load more" button - uncomment and implement logic later */}
            {/* {recentArticles.length > 0 && <Button variant="outline" class="w-full mt-8">Charger plus d'articles</Button>} */}
          </div>
        </section>
      </div>

      {/* Sidebar Section */}
      <div class="mt-12 lg:mt-0">
        <aside class="space-y-8 sticky top-8">
          {/* Categories Card */}
            <CategoriesWithCount parentId={magazineCategoryId} magazineSlug={magazineSlug} />

          <NewsletterCard />

          {/* Popular Articles Card */}
          <Card>
            <CardHeader><CardTitle class="flex items-center gap-2"><Icon name="openmoji:rocket" class="h-5 w-5"/> Articles populaires</CardTitle></CardHeader>
            <CardContent>
              <ul class="space-y-4">
                {sidebarPopularArticles.length > 0 ? sidebarPopularArticles.map((articleData) => (
                  <li>
                    <ArticleCard
                      {...articleData}
                      lang={lang}
                      magazineSlug={magazineSlug}
                      variantData="popular"
                      variantStyle="compact"
                    />
                  </li>
                )) : <li class="text-gray-500 text-sm">Aucun article populaire pour le moment.</li>}
              </ul>
            </CardContent>
          </Card>

          <ContributeCard />
        </aside>
      </div>
    </div>
  </main>
</Layout>