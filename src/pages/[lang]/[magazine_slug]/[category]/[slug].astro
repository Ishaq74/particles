---
export const prerender = false;

import Layout from '@layouts/Layout.astro';
import PageHeader from '@components/blog/PageHeader.astro';
import ArticleCard from '@components/blog/ArticleCard.astro';
import CategoriesWithCount from '@components/blog/CategoriesWithCount.astro';
import ContributeCard from '@components/blog/ContributeCard.astro';
import NewsletterCard from '@components/blog/NewsletterCard.astro';
import { Card, CardContent, CardHeader, CardTitle } from '@components/starwind/card';
import { Avatar, AvatarFallback, AvatarImage } from '@components/starwind/avatar';
import { Badge } from '@components/starwind/badge';
import { Button } from '@components/starwind/button';
import { Input } from '@components/starwind/input';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@components/starwind/tabs';
import { Textarea } from '@components/starwind/textarea';
import { Icon } from 'astro-icon/components';
import { loadArticleDetail } from '@utils/articleContent';
import { loadCommentsForArticle, type CommentNode } from '@utils/comments';

const lang: string = Astro.locals.lang ?? 'fr';
const params = Astro.params;
const pageContext = Astro.locals.pageContext;

if (!pageContext || pageContext.type !== 'magazine') {
	throw new Error('Contexte magazine absent ou incorrect');
}

const articleEntry = pageContext.item as import('astro:content').CollectionEntry<'articles'> | null;
const articleTranslation = pageContext.itemTranslation as import('astro:content').CollectionEntry<'articleTranslation'> | null;
const entityConfig = pageContext.entityConfig;

if (!articleEntry || !entityConfig) {
	throw new Error('Article ou configuration entité manquant dans le contexte');
}

const translations = {
	fr: {
		home: 'Accueil',
		magazine: 'Magazine',
		publishedOn: 'Publié le',
		readTime: 'Temps de lecture',
		minutes: 'min',
		comments: 'Commentaires',
		commentCount: (count: number) => `${count} commentaire${count > 1 ? 's' : ''}`,
		viewComments: 'Voir les commentaires',
		writeComment: 'Écrire un commentaire',
		noComments: 'Aucun commentaire pour le moment.',
		leaveComment: 'Laisser un commentaire',
		commentName: 'Votre nom *',
		commentEmail: 'Votre email (ne sera pas publié) *',
		commentContent: 'Votre commentaire *',
		submitComment: 'Envoyer le commentaire',
		commentSuccess: 'Commentaire envoyé avec succès ! Il sera publié après modération.',
		commentError: "Erreur lors de l'envoi du commentaire.",
		categoryFallbackDescription: 'Découvrez tous nos articles sur ce sujet.',
		categorySectionTitle: 'Dans la même catégorie',
		relatedTitle: 'Lire aussi',
		popularTitle: 'Populaires',
		viewProfile: 'Voir profil',
		authorArticles: 'Voir tous ses articles',
		authorFallback: 'Anonyme',
	},
	en: {
		home: 'Home',
		magazine: 'Magazine',
		publishedOn: 'Published on',
		readTime: 'Reading time',
		minutes: 'min',
		comments: 'Comments',
		commentCount: (count: number) => `${count} comment${count === 1 ? '' : 's'}`,
		viewComments: 'View comments',
		writeComment: 'Write a comment',
		noComments: 'No comments yet.',
		leaveComment: 'Leave a comment',
		commentName: 'Your name *',
		commentEmail: 'Your email (will not be published) *',
		commentContent: 'Your comment *',
		submitComment: 'Submit comment',
		commentSuccess: 'Comment submitted! It will be published after moderation.',
		commentError: 'Error while submitting the comment.',
		categoryFallbackDescription: 'Discover all our articles on this topic.',
		categorySectionTitle: 'In the same category',
		relatedTitle: 'Read also',
		popularTitle: 'Popular',
		viewProfile: 'View profile',
		authorArticles: 'See all articles',
		authorFallback: 'Anonymous',
	},
	es: {
		home: 'Inicio',
		magazine: 'Revista',
		publishedOn: 'Publicado el',
		readTime: 'Tiempo de lectura',
		minutes: 'min',
		comments: 'Comentarios',
		commentCount: (count: number) => `${count} comentario${count === 1 ? '' : 's'}`,
		viewComments: 'Ver comentarios',
		writeComment: 'Escribir un comentario',
		noComments: 'Sin comentarios por ahora.',
		leaveComment: 'Dejar un comentario',
		commentName: 'Su nombre *',
		commentEmail: 'Su correo (no se publicará) *',
		commentContent: 'Su comentario *',
		submitComment: 'Enviar comentario',
		commentSuccess: '¡Comentario enviado! Será publicado después de moderación.',
		commentError: 'Error al enviar el comentario.',
		categoryFallbackDescription: 'Descubre todos nuestros artículos sobre este tema.',
		categorySectionTitle: 'En la misma categoría',
		relatedTitle: 'También te puede interesar',
		popularTitle: 'Populares',
		viewProfile: 'Ver perfil',
		authorArticles: 'Ver todos sus artículos',
		authorFallback: 'Anónimo',
	},
} as const;

const t = translations[lang as keyof typeof translations] ?? translations.fr;

const articleDetail = await loadArticleDetail(entityConfig, articleEntry, lang, articleTranslation ?? null);
const { detail, rootCategory, siblings, popular, related } = articleDetail;

const commentsData = await loadCommentsForArticle(detail.article.id);
const { flat: flatComments, nested: nestedComments } = commentsData;

const magazineSlug = pageContext.slug ?? params.magazine_slug ?? 'magazine';
const categorySlug = detail.category?.slug ?? params.category ?? '';

const formatDate = (value?: string) => {
	if (!value) return '';
	const parsed = new Date(value);
	return Number.isNaN(parsed.getTime())
		? ''
		: parsed.toLocaleDateString(lang, { day: 'numeric', month: 'long', year: 'numeric' });
};

const formattedPublicationDate = formatDate(detail.publicationDate);
const commentCountLabel = t.commentCount(flatComments.length);

const breadcrumbs = [
	{ label: t.home, url: `/${lang}/`, icon: 'openmoji:house' },
	{ label: rootCategory?.name ?? t.magazine, url: `/${lang}/${magazineSlug}`, icon: rootCategory?.iconName ?? 'openmoji:newspaper' },
	{ label: detail.category?.name ?? categorySlug, url: `/${lang}/${magazineSlug}/${categorySlug}`, icon: detail.category?.iconName ?? 'openmoji:bookmark' },
	{ label: detail.title, icon: 'openmoji:bookmark-tabs', isCurrent: true },
];

const authorEntry = detail.author;
const authorName = authorEntry?.data?.name ?? t.authorFallback;
const authorSlug = authorEntry?.data?.slug ?? '';
const authorBio = authorEntry?.data?.bio ?? articleTranslation?.data?.bio ?? '';

const extractAvatarUrl = (avatar: unknown): string => {
	if (!avatar) return '';
	if (typeof avatar === 'string') return avatar;
	if (typeof avatar === 'object') {
		const typed = avatar as Record<string, string>;
		return typed.src ?? typed.url ?? '';
	}
	return '';
};

const authorAvatarUrl = extractAvatarUrl(authorEntry?.data?.avatar ?? null);

const computeInitials = (value?: string | null) => {
	if (!value) return '?';
	return value
		.split(' ')
		.filter(Boolean)
		.map((part) => part[0] ?? '')
		.join('')
		.toUpperCase() || '?';
};

const commentsWithDepth = (() => {
	const result: Array<{ comment: CommentNode; depth: number }> = [];
	const traverse = (nodes: CommentNode[], depth: number) => {
		nodes.forEach((node) => {
			result.push({ comment: node, depth });
			if (node.children.length > 0) {
				traverse(node.children, depth + 1);
			}
		});
	};
	traverse(nestedComments, 0);
	return result;
})();

const siblingsToRender = siblings.slice(0, 4);
const popularToRender = popular.slice(0, 5);
const relatedToRender = related.slice(0, 4);

const commentDataset = {
	articleId: detail.article.id,
	successMessage: t.commentSuccess,
	errorMessage: t.commentError,
};

const articlePageTitle = detail.title;
const articlePageDescription = detail.summary || t.categoryFallbackDescription;
const headerIcon = detail.category?.iconName ?? rootCategory?.iconName ?? 'openmoji:newspaper';

const authorInitials = computeInitials(authorName);

const formatDateTime = (value: string) => {
	const parsed = new Date(value);
	return Number.isNaN(parsed.getTime())
		? ''
		: parsed.toLocaleString(lang, {
			year: 'numeric',
			month: 'short',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit',
		});
};
---

<Layout title={articlePageTitle} lang={lang}>
	<PageHeader
		title={articlePageTitle}
		description={articlePageDescription}
		lang={lang}
		magazineSlug={magazineSlug}
		breadcrumbItems={breadcrumbs}
		icon={headerIcon}
	/>

	<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-16">
		<div class="grid grid-cols-1 lg:grid-cols-[minmax(0,2fr)_minmax(0,1fr)] lg:gap-12">
			<div class="space-y-12">
				<article class="space-y-8">
					{detail.category?.name && (
						<Badge variant="secondary" class="inline-flex items-center gap-2">
							{detail.category.iconName && <Icon name={detail.category.iconName} class="h-4 w-4" />}
							<span>{detail.category.name}</span>
						</Badge>
					)}
					<div class="flex flex-wrap items-center gap-6 text-sm text-gray-500 border border-gray-200 rounded-xl p-4 bg-white shadow-sm">
						<div class="flex items-center gap-3">
							<Avatar class="h-12 w-12">
								{authorAvatarUrl ? (
									<AvatarImage src={authorAvatarUrl} alt={authorName} />
								) : (
									<AvatarFallback>{authorInitials}</AvatarFallback>
								)}
							</Avatar>
							<div>
								<p class="font-semibold text-gray-800">{authorName}</p>
								{authorSlug && (
									<a href={`/${lang}/auteurs/${authorSlug}`} class="text-blue-600 hover:underline">{t.viewProfile}</a>
								)}
							</div>
						</div>
						{formattedPublicationDate && (
							<span class="flex items-center gap-2">
								<Icon name="openmoji:calendar" class="h-4 w-4" />
								<span>{t.publishedOn}: {formattedPublicationDate}</span>
							</span>
						)}
						{detail.readTimeMinutes && (
							<span class="flex items-center gap-2">
								<Icon name="openmoji:stopwatch" class="h-4 w-4" />
								<span>{t.readTime}: {detail.readTimeMinutes} {t.minutes}</span>
							</span>
						)}
					</div>

					{detail.featuredImageUrl && (
						<img
							src={detail.featuredImageUrl}
							alt={detail.featuredImageAlt ?? detail.title}
							class="w-full rounded-3xl shadow-lg border border-gray-100"
							loading="lazy"
						/>
					)}

					<div class="prose prose-lg max-w-none">
						<div set:html={detail.content} />
					</div>
				</article>

				<section class="space-y-6" id="comments">
					<header class="flex items-center justify-between">
						<h2 class="text-2xl font-bold text-gray-900 flex items-center gap-2">
							<Icon name="openmoji:speech-balloon" class="h-6 w-6 text-blue-500" />
							<span>{t.comments}</span>
							<span class="text-sm text-gray-500">({commentCountLabel})</span>
						</h2>
					</header>

					<Tabs defaultValue="comments" class="w-full">
						<TabsList class="grid w-full grid-cols-2">
							<TabsTrigger value="comments">{t.viewComments}</TabsTrigger>
							<TabsTrigger value="write">{t.writeComment}</TabsTrigger>
						</TabsList>

						<TabsContent value="comments" class="mt-6 space-y-6">
							{commentsWithDepth.length === 0 ? (
								<p class="italic text-gray-500">{t.noComments}</p>
							) : (
								commentsWithDepth.map(({ comment, depth }) => (
									<article
										class="bg-gray-50 border border-gray-200 rounded-xl p-4 shadow-sm"
										style={`margin-left: ${depth * 1.5}rem`}
									>
										<div class="flex items-start gap-4">
											<Avatar class="h-10 w-10 shrink-0">
												<AvatarFallback>{computeInitials(comment.authorName)}</AvatarFallback>
											</Avatar>
											<div class="space-y-2">
												<p class="font-semibold text-gray-800">{comment.authorName}</p>
												<p class="text-gray-700 text-sm whitespace-pre-line">{comment.content}</p>
												<p class="text-xs text-gray-500">{formatDateTime(comment.createdAt)}</p>
											</div>
										</div>
									</article>
								))
							)}
						</TabsContent>

						<TabsContent value="write" class="mt-6">
							<Card>
								<CardContent class="p-6 space-y-4">
									<h3 class="text-xl font-semibold text-gray-900">{t.leaveComment}</h3>
									<form
										class="space-y-4"
										data-comment-form
										data-article-id={commentDataset.articleId}
										data-success-message={commentDataset.successMessage}
										data-error-message={commentDataset.errorMessage}
									>
										<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
											<Input name="author_name" placeholder={t.commentName} required />
											<Input name="author_email" type="email" placeholder={t.commentEmail} required />
										</div>
										<Textarea name="content" placeholder={t.commentContent} required rows={5}></Textarea>
										<Button type="submit">{t.submitComment}</Button>
									</form>
								</CardContent>
							</Card>
						</TabsContent>
					</Tabs>
				</section>

				{siblingsToRender.length > 0 && (
					<section class="space-y-6">
						<h2 class="text-2xl font-bold text-gray-900">{t.categorySectionTitle}</h2>
						<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
							{siblingsToRender.map((item) => (
								<ArticleCard
									article={item.article}
									author={item.author}
									title={item.title}
									summary={item.summary}
									article_featured_image_url={item.article_featured_image_url ?? undefined}
									article_featured_image_alt={item.article_featured_image_alt ?? undefined}
									category_icon_name={item.category_icon_name ?? undefined}
									category_name={item.category_name}
									category_seo_slug={item.category_seo_slug}
									article_seo_slug={item.article_seo_slug}
									publication_date={item.publication_date}
									read_time_minutes={item.read_time_minutes}
									view_count={item.view_count}
									lang={lang}
									magazineSlug={magazineSlug}
									variantData="related"
									variantStyle="horizontal"
								/>
							))}
						</div>
					</section>
				)}
			</div>

			<aside class="space-y-8 mt-12 lg:mt-0">
				<Card>
					<CardHeader class="text-center space-y-4">
						<Avatar class="h-20 w-20 mx-auto border-4 border-white shadow-md">
							{authorAvatarUrl ? (
								<AvatarImage src={authorAvatarUrl} alt={authorName} />
							) : (
								<AvatarFallback>{authorInitials}</AvatarFallback>
							)}
						</Avatar>
						<CardTitle>{authorName}</CardTitle>
					</CardHeader>
					<CardContent class="space-y-4">
						{authorBio && (
							<p class="text-sm text-gray-600 text-center italic line-clamp-4">{authorBio}</p>
						)}
						{authorSlug && (
							<Button is="a" href={`/${lang}/auteurs/${authorSlug}`} variant="outline" size="sm" class="w-full">{t.authorArticles}</Button>
						)}
					</CardContent>
				</Card>

				<CategoriesWithCount parentId={pageContext.entityId} magazineSlug={magazineSlug} />

				{popularToRender.length > 0 && (
					<Card>
						<CardHeader>
							<CardTitle class="flex items-center gap-2">
								<Icon name="openmoji:rocket" class="h-5 w-5" />
								<span>{t.popularTitle}</span>
							</CardTitle>
						</CardHeader>
						<CardContent>
							<ul class="space-y-4">
								{popularToRender.map((item) => (
									<li>
										<ArticleCard
											article={item.article}
											author={item.author}
											title={item.title}
											summary={item.summary}
											article_featured_image_url={item.article_featured_image_url ?? undefined}
											article_featured_image_alt={item.article_featured_image_alt ?? undefined}
											category_icon_name={item.category_icon_name ?? undefined}
											category_name={item.category_name}
											category_seo_slug={item.category_seo_slug}
											article_seo_slug={item.article_seo_slug}
											publication_date={item.publication_date}
											read_time_minutes={item.read_time_minutes}
											view_count={item.view_count}
											lang={lang}
											magazineSlug={magazineSlug}
											variantData="popular"
											variantStyle="compact"
										/>
									</li>
								))}
							</ul>
						</CardContent>
					</Card>
				)}

				{relatedToRender.length > 0 && (
					<Card>
						<CardHeader>
							<CardTitle class="flex items-center gap-2">
								<Icon name="openmoji:link" class="h-5 w-5" />
								<span>{t.relatedTitle}</span>
							</CardTitle>
						</CardHeader>
						<CardContent>
							<ul class="space-y-4">
								{relatedToRender.map((item) => (
									<li>
										<ArticleCard
											article={item.article}
											author={item.author}
											title={item.title}
											summary={item.summary}
											article_featured_image_url={item.article_featured_image_url ?? undefined}
											article_featured_image_alt={item.article_featured_image_alt ?? undefined}
											category_icon_name={item.category_icon_name ?? undefined}
											category_name={item.category_name}
											category_seo_slug={item.category_seo_slug}
											article_seo_slug={item.article_seo_slug}
											publication_date={item.publication_date}
											read_time_minutes={item.read_time_minutes}
											view_count={item.view_count}
											lang={lang}
											magazineSlug={magazineSlug}
											variantData="related"
											variantStyle="horizontal"
										/>
									</li>
								))}
							</ul>
						</CardContent>
					</Card>
				)}

				<NewsletterCard />
				<ContributeCard />
			</aside>
		</div>
	</main>

	<script>
		const forms = document.querySelectorAll('[data-comment-form]');
		forms.forEach((form) => {
			form.addEventListener('submit', async (event) => {
				event.preventDefault();
				const target = event.currentTarget as HTMLFormElement;
				const dataset = target.dataset;
				const articleId = dataset.articleId;
				if (!articleId) {
					return;
				}

				const successMessage = dataset.successMessage ?? 'Comment submitted.';
				const errorMessage = dataset.errorMessage ?? 'Unable to submit comment.';

				const formData = new FormData(target);
				const payload = {
					article_id: articleId,
					author_name: formData.get('author_name'),
					author_email: formData.get('author_email'),
					content: formData.get('content'),
					status: 'PENDING',
				};

				try {
					const response = await fetch('/api/comments', {
						method: 'POST',
						headers: { 'Content-Type': 'application/json' },
						body: JSON.stringify(payload),
					});

					if (response.ok) {
						alert(successMessage);
						target.reset();
					} else {
						alert(errorMessage);
					}
				} catch (error) {
					console.error('Comment submission failed', error);
					alert(errorMessage);
				}
			});
		});
	</script>
</Layout>
